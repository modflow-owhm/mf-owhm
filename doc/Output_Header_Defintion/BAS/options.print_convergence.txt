
BAS Package Options block keyword PRINT_CONVERGENCE

Writes for each time step's the head and the solver iteration's 
change in head for the worst model cell.

The output may be text or binary format.

If the output file is text format, then it will contain a single header line
followed by the output written for each time step. If the output file is binary format,
then each times step writes a binary record containing only the output data.


/-------------------------------------\
|                                     |
|    Text File Header Definition      |
|                                     |
\-------------------------------------/

SP                         is the stress period number
TS                         is the time step number
ITER                       is the outer iteration number
LAY                        is the layer  number of the cell with head and error information being described
ROW                        is the row    number of the cell with head and error information being described
COL                        is the column number of the cell with head and error information being described
HEAD              [L]      is the solver calculated head (HNEW) for the outer iteration, ITER
CHNG_HEAD         [L]      is the change in head between the current solver iteration, ITER, and the previous iteration, ITER – 1 (commonly called HCLOSE)
                              That is, CHNG_HEAD = HNEW(ITER) - HNEW(ITER-1)
CELL_ID                    is the model cell's unique identifier based on the cell's layer, row, and column. See note below on how it is calculated
DATE_START                 is the starting calendar date of the time step in the form: yyyy-mm-ddThh:mm:ss


/-------------------------------------\
|                                     |
|    Binary File Record Formatting    |
|                                     |
\-------------------------------------/


SP                  INTEGER
TS                  INTEGER
ITER                INTEGER
LAY                 INTEGER
ROW                 INTEGER
COL                 INTEGER
HEAD                DOUBLE
CHNG_HEAD           DOUBLE
CELL_ID             INTEGER
DATE_START          CHARACTER(19), starting date formatted as ‘yyyy-mm-ddThh:mm:ss’


/----------------------------\
|                            |
|   Additional Information   |
|                            |
\----------------------------/


Date output is formatted using ISO 8601-1:2019 standard without a time zone designation:
https://en.wikipedia.org/wiki/ISO_8601#Combined_date_and_time_representations

The general format is:
yyyy-mm-ddThh:mm:ss
                   where:
                         yyyy is the four digit Gregorian year
                         mm   before the T is the two digit month number       (01 to 12)
                         dd   is the two digit day of the month                (01 to {28, 29, 30, 31}, depending on the month)
                         T    calendar date and 24-hour clock time separator
                         hh   is the hour within the day                       (00 to 23 hour)
                         mm   after the T is the two digit minutes in the hour (00 to 59 minute)
                         ss   is the two digit seconds of the minute           (00 to 59 second)

Output is in model units that uses an
   L as a place holder for Length, L2 is for area, L3 is for volume and
   T as a place holder for Time

which are defined in the DIS package as being:
   L: Feet, Meters, Centimeters, and Undefined
   T: Seconds, Minutes, Hours, Days, Years, and Undefined

------------------------------------------------------------------------------------------

The MODFLOW-OWHM standard binary formatting is set to
Fortran Unformatted Stream (C style binary).

The description of each header indicates the Fortran variable
that is used to write the binary recorded.

The following explain their storage use:

Keyword       Storage      Default Fortran Type  Python Numpy Type       Fortran 2003 Standard
DOUBLE        8 bytes      Double Precision      numpy.dtype('float64')  REAL(kind=real64)
INTEGER       4 bytes      Integer               numpy.dtype('int32')    INTEGER(kind=int32)
CHARACTER(X)  X × 1 bytes  Character(X)          numpy.dtype('SX')       CHARACTER(len=X)
SNGL          4 bytes      Real                  numpy.dtype('float32')  REAL(kind=real32)

------------------------------------------------------------------------------------------

To get the CELL_ID given:
   ROW  is the row number
   COL  is the column number
   NROW is the number of model rows    defined in the DIS
   NCOL is the number of model columns defined in the DIS
   
gives:

   CELL_ID = COL + NCOL*(ROW-1) + NCOL*NROW*(LAY-1)

------------------------------------------------------------------------------------------

To convert CELL_ID to LAY, ROW, COL the following steps are required:

    I = CELL_ID
    RC = NCOL * NROW
    !
    LAY = I / RC
    IF (MOD(I,RC) /= 0) LAY = LAY + 1
    !
    I = I - RC*(LAY-1)
    !
    ROW = I / NCOL
    IF (MOD(I,NCOL) /= 0) ROW = ROW + 1
    !
    COL = I - NCOL*(ROW-1)
    
Note that all division is integer division so the decimal part is truncated (for example, 7/3 = 2.333 -> 2)
MOD(A,P) represents the modulus division (remainder), which is defined as: 

MOD(A,P) = A - ((A/P) * P)

           where A/P is division that truncates the decimal.